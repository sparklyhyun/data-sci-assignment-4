plot(kMin:kMax, withinSS, pch=19, type="b", col="green",
xlab = "Value of K", ylab = "Sum of Squares (Within and Between)")
K <- 5
kMeansFit <- kmeans(clusterColumns3, centers = K, nstart = 20)
kMeansFit <- kmeans(clusterColumns3, centers = K, nstart = 20)
kMeansFit
# Note that the labels are stored as follows
kMeansFit$cluster
# Note that the labels are stored as follows
kMeansFit$cluster
clusterColumns3$cluster <- kMeansFit$cluster
mostFreqProductsExtracted$numStockCode <- clusterColumns$numStockCode
mostFreqProductsExtracted$numCountry <- clusterColumns$numCountry
mostFreqProductsExtracted$cluster <- clusterColumns3$cluster
mostFreqProductsExtracted
clsuterProductCountry <- mostFreqProductsExtracted[order(mostFreqProductsExtracted$cluster),]
clsuterProductCountry
write.csv(clsuterProductCountry,'clusterProductCustomer.csv')
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters
clusterLabels <- allProductCountryClusters$cluster
productCountryCluster1 <- allProductCountryClusters[clusterLabels == 1,]
productCountryCluster1
productCountryCluster2 <- allProductCountryClusters[clusterLabels == 2,]
productCountryCluster3 <- allProductCountryClusters[clusterLabels == 3,]
productCountryCluster3
productCountryCluster4 <- allProductCountryClusters[clusterLabels == 4,]
productCountryCluster4
productCountryCluster5
# cluster 1
#trying to get top 10
cluster1 <- subset(productCountryCluster1, select = c("StockCode"))
clutercount1 <- table(unlist(cluster1))
count1<-as.data.frame(clutercount1)
colnames(count1) <- c("StockCode", "Freq")
count1
sortcluster1 <- count1[rev(order(count1$Freq)),]
sortcluster1
top10cluster1 <- sortcluster1[1:10, "StockCode"]
top10cluster1
top10cluster1extracted <- productCountryCluster1[is.element(productCountryCluster1$StockCode, top10cluster1),]
top10cluster1extracted
stockcodes1 <- unique(top10cluster1extracted$StockCode)
stockcodes1
descriptions1
descriptions1 <- unique(top10cluster1extracted$Description)
descriptions1
# cluster 2
#trying to get top 10
cluster2 <- subset(productCountryCluster2, select = c("StockCode"))
clutercount2 <- table(unlist(cluster2))
count2<-as.data.frame(clutercount2)
colnames(count2) <- c("StockCode", "Freq")
count2
sortcluster2 <- count2[rev(order(count2$Freq)),]
count2
# cluster 2
#trying to get top 10
cluster2 <- subset(productCountryCluster2, select = c("StockCode"))
clutercount2 <- table(unlist(cluster2))
count2<-as.data.frame(clutercount2)
colnames(count2) <- c("StockCode", "Freq")
count2
count2
count1
write.csv(clsuterProductCountry,'clusterProductCustomer.csv')
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters
clusterLabels <- allProductCountryClusters$cluster
productCountryCluster1 <- allProductCountryClusters[clusterLabels == 1,]
productCountryCluster1
productCountryCluster2 <- allProductCountryClusters[clusterLabels == 2,]
productCountryCluster2
productCountryCluster3 <- allProductCountryClusters[clusterLabels == 3,]
productCountryCluster3
productCountryCluster4 <- allProductCountryClusters[clusterLabels == 4,]
productCountryCluster4
productCountryCluster5
# cluster 1
#trying to get top 10
cluster1 <- subset(productCountryCluster1, select = c("StockCode"))
clutercount1 <- table(unlist(cluster1))
count1<-as.data.frame(clutercount1)
colnames(count1) <- c("StockCode", "Freq")
count1
knitr::opts_chunk$set(echo = TRUE)
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters
clsuterProductCountry
allProductCountryClusters
clusterLabels <- allProductCountryClusters$cluster
productCountryCluster1 <- allProductCountryClusters[clusterLabels == 1,]
productCountryCluster1
# cluster 1
#trying to get top 10
cluster1 <- subset(productCountryCluster1, select = c("StockCode"))
clutercount1 <- table(unlist(cluster1))
count1<-as.data.frame(clutercount1)
colnames(count1) <- c("StockCode", "Freq")
count1
cluster1
clutercount1
count1
# cluster 2
#trying to get top 10
cluster2 <- subset(productCountryCluster2, select = c("StockCode"))
# cluster 2
#trying to get top 10
cluster2 <- subset(productCountryCluster2, select = c("StockCode"))
productCountryCluster2 <- allProductCountryClusters[clusterLabels == 2,]
productCountryCluster3 <- allProductCountryClusters[clusterLabels == 3,]
productCountryCluster4 <- allProductCountryClusters[clusterLabels == 4,]
productCountryCluster5 <- allProductCountryClusters[clusterLabels == 5,]
# cluster 2
#trying to get top 10
cluster2 <- subset(productCountryCluster2, select = c("StockCode"))
clutercount2 <- table(unlist(cluster2))
count2<-as.data.frame(clutercount2)
count2
colnames(count2) <- c("StockCode", "Freq")
count2
sortcluster2
sortcluster2 <- count2[rev(order(count2$Freq)),]
top10cluster2 <- sortcluster2[1:10, "StockCode"]
top10cluster2
top10cluster2extracted <- productCountryCluster2[is.element(productCountryCluster2$StockCode, top10cluster2),]
top10cluster2extracted
stockcodes2 <- unique(top10cluster1extracted$StockCode)
top10cluster2extracted
stockcodes2 <- unique(top10cluster2extracted$StockCode)
stockcodes2
descriptions2 <- unique(top10cluster2extracted$Description)
descriptions2
# cluster 1
#trying to get top 10
cluster1 <- subset(productCountryCluster1, select = c("StockCode"))
cluster1
# cluster 1
#trying to get top 10
cluster1 <- subset(productCountryCluster1, select = c("StockCode"))
cluster1
clutercount1 <- table(unlist(cluster1))
clutercount1
cluster1
stockcodelol <- unique(productCountryCluster1$StockCode)
stockcodelol
cluster1
clutercount1 <- table(unlist(cluster1))
clutercount1
clutercount1
count1<-as.data.frame(clutercount1)
colnames(count1) <- c("StockCode", "Freq")
colnames(count1) <- c("StockCode", "Freq")
count1
sortcluster1 <- count1[rev(order(count1$Freq)),]
sortcluster1
top10cluster1 <- sortcluster1[1:10, "StockCode"]
top10cluster1
top10cluster1extracted <- productCountryCluster1[is.element(productCountryCluster1$StockCode, top10cluster1),]
top10cluster1extracted
stockcodes1 <- unique(top10cluster1extracted$StockCode)
stockcodes1
descriptions1 <- unique(top10cluster1extracted$Description)
descriptions1
stockcodes1
# cluster 3
#trying to get top 10
cluster3 <- subset(productCountryCluster3, select = c("StockCode"))
clutercount3 <- table(unlist(cluster3))
count3<-as.data.frame(clutercount3)
count3
colnames(count3) <- c("StockCode", "Freq")
count3
sortcluster3 <- count3[rev(order(count3$Freq)),]
sortcluster3
top10cluster3 <- sortcluster3[1:10, "StockCode"]
top10cluster3
top10cluster3extracted <- productCountryCluster3[is.element(productCountryCluster3$StockCode, top10cluster3),]
top10cluster3extracted
stockcodes3 <- unique(top10cluster3extracted$StockCode)
stockcodes3
descriptions3 <- unique(top10cluster3extracted$Description)
descriptions3
# cluster 4
#trying to get top 10
cluster4 <- subset(productCountryCluster4, select = c("StockCode"))
clutercount4 <- table(unlist(cluster4))
count4<-as.data.frame(clutercount4)
count4
colnames(count4) <- c("StockCode", "Freq")
count4
sortcluster4 <- count4[rev(order(count4$Freq)),]
sortcluster4
top10cluster4 <- sortcluster4[1:10, "StockCode"]
top10cluster4
top10cluster4extracted <- productCountryCluster4[is.element(productCountryCluster4$StockCode, top10cluster4),]
top10cluster4extracted
stockcodes4 <- unique(top10cluster4extracted$StockCode)
stockcodes4
descriptions4 <- unique(top10cluster4extracted$Description)
descriptions4
#cluster 5
#trying to get top 10
cluster5 <- subset(productCountryCluster5, select = c("StockCode"))
clutercount5 <- table(unlist(cluster5))
count5<-as.data.frame(clutercount5)
count5
colnames(count5) <- c("StockCode", "Freq")
count5
sortcluster5 <- count5[rev(order(count5$Freq)),]
sortcluster5
top10cluster5 <- sortcluster5[1:10, "StockCode"]
top10cluster5
top10cluster5extracted <- productCountryCluster5[is.element(productCountryCluster5$StockCode, top10cluster5),]
top10cluster5extracted
stockcodes5 <- unique(top10cluster5extracted$StockCode)
stockcodes5
descriptions5 <- unique(top10cluster5extracted$Description)
descriptions5
country1 <- unique(top10cluster1extracted$Country)
country1
stockcodes1
descriptions1
country1
country2 <- unique(top10cluster1extracted$Country)
country2
country2 <- unique(top10cluster2extracted$Country)
country2
country3
country3 <- unique(top10cluster1extracted$Country)
country3
country4 <- unique(top10cluster4extracted$Country)
country4
country5 <- unique(top10cluster5extracted$Country)
country5
clusterColumns3 <- subset(clusterColumns, select = c("numStockCode", "numCountry"))
retailData <- read.csv("assign3_RetailData.csv", header = TRUE)
library(dplyr)
df<-filter(retailData,Description!="[A-Z].*")
df2<-filter(df1,Quantity>0 )
df3<-filter(df2,UnitPrice>0)
df6<-filter(df5,Description!="Next Day Carriage")
df7<-filter(df6,CustomerID!="NA")
df7<-filter(df7,Country != "Unspecified")
df<-filter(retailData,Description!="[A-Z].*")
df1<-filter(df,Description!="SAMPLES")
df2<-filter(df1,Quantity>0 )
df3<-filter(df2,UnitPrice>0)
df4<-filter(df3,Description!="Manual")
df5<-filter(df4,Description!="Adjust bad debt")
df6<-filter(df5,Description!="Next Day Carriage")
df7<-filter(df6,CustomerID!="NA")
df7<-filter(df7,Country != "Unspecified")
df7<-filter(df7,Quantity<20000 )
df7<-filter(df7,UnitPrice<3000 )
t2 <- subset(df7, select = c("StockCode"))
countt2 <- table(unlist(t2))
countt2df<-as.data.frame(countt2)
colnames(countt2df) <- c("StockCode", "Freq")
countt2dfSort <- countt2df[rev(order(countt2df$Freq)),]
mostFreqProducts <- countt2dfSort[1:1000, "StockCode"]
mostFreqProductsExtracted <- df7[is.element(df7$StockCode, mostFreqProducts),]
head(mostFreqProductsExtracted)
xtabs(Quantity ~ CustomerID + StockCode, data = mostFreqProductsExtracted, addNA = TRUE, sparse = TRUE)
clusterColumns <- subset(mostFreqProductsExtracted, select = c("StockCode", "Quantity", "CustomerID", "Country"))
clusterColumns$numStockCode <- as.numeric(clusterColumns$StockCode)
clusterColumns$numCountry <- as.numeric(clusterColumns$Country)
clusterColumns2 <- subset(clusterColumns, select = c("numStockCode", "Quantity", "CustomerID", "numCountry"))
clusterColumns3 <- subset(clusterColumns, select = c("numStockCode", "numCountry"))
clusterColumns3 <- subset(clusterColumns, select = c("numStockCode", "numCountry"))
kMin <- 1
kMax <- 10
withinSS <- double(kMax - kMin + 1)
betweenSS <- double(kMax - kMin + 1)
for (K in kMin:kMax) {
kMeansFit <-  kmeans(clusterColumns3, centers = K)
withinSS[K] <- sum(kMeansFit$withinss)
betweenSS[K] <- kMeansFit$betweenss
}
plot(kMin:kMax, betweenSS, pch=19, type="b", col="red",
xlab = "Value of K", ylab = "Sum of Squares (Within and Between)")
points(kMin:kMax, withinSS, pch=19, type="b", col="green")
plot(kMin:kMax, withinSS, pch=19, type="b", col="green",
xlab = "Value of K", ylab = "Sum of Squares (Within and Between)")
descriptions1 <- unique(top10cluster1extracted$Description)
descriptions1
descriptions1 <- unique(top10cluster1extracted$Description)
descriptions1
country1 <- unique(top10cluster1extracted$Country)
country1
mostFreqProductsExtracted
invoice1 <- unique(top10cluster1extracted$InvoiceDate)
invoice1
write.csv(invoice1, "invoiceTest.csv")
write.csv(invoice1, "invoiceTest.csv")
invoice1
country1 <- unique(top10cluster1extracted$Country)
country1
hist(top10cluster1extracted$Country, col = "pink")
hist(top10cluster1extracted$numCountry, col = "pink")
barplot(top10cluster1extracted$numCountry, col = "pink")
country1
barplot(top10cluster1extracted$Country,
main = "Frequency of each country",
xlab = "Frequency",
ylab = "Country",
names.arg = country1,
col = "darkred",
horiz = TRUE)
barplot(top10cluster1extracted$Country,
main = "Frequency of each country",
xlab = "Frequency",
ylab = "Country",
names.arg = c(country1),
col = "darkred",
horiz = TRUE)
barplot(top10cluster1extracted$Country,
main = "Frequency of each country",
xlab = "Frequency",
ylab = "Country",
col = "darkred",
horiz = TRUE)
barplot(top10cluster1extracted,
main = "Frequency of each country",
xlab = "Frequency",
ylab = "Country",
names.arg = top10cluster1extracted$Country,
col = "darkred",
horiz = TRUE)
summary(top10cluster1extracted)
barplot(top10cluster1extracted$Country)
barplot(top10cluster1extracted$numCountry)
hist(top10cluster1extracted$numCountry)
betweenSS <- double(kMax - kMin + 1)
for (K in kMin:kMax) {
kMeansFit <-  kmeans(clusterColumns, centers = K)
withinSS[K] <- sum(kMeansFit$withinss)
betweenSS[K] <- kMeansFit$betweenss
}
points(kMin:kMax, withinSS, pch=19, type="b", col="green")
#clusterColumns3 <- subset(clusterColumns, select = c("numStockCode", "numCountry"))
kMin <- 1
kMax <- 10
withinSS <- double(kMax - kMin + 1)
betweenSS <- double(kMax - kMin + 1)
for (K in kMin:kMax) {
kMeansFit <-  kmeans(clusterColumns, centers = K)
withinSS[K] <- sum(kMeansFit$withinss)
betweenSS[K] <- kMeansFit$betweenss
}
descriptions2
descriptions3
descriptions4
descriptions5
country1
country2
country3
country4
country5
price1 <- unique(top10cluster1extracted$UnitPrice)
price1
price2 <- unique(top10cluster2extracted$UnitPrice)
price2
price3 <- unique(top10cluster3extracted$UnitPrice)
price3
price4 <- unique(top10cluster4extracted$UnitPrice)
price4
price5 <- unique(top10cluster2extracted$UnitPrice)
price5
hist(kMeansClust1$numCountry,  col = "lightgreen")
descriptions3
descriptions4
price4
country5
descriptions5
price5
country1
descriptions4 <- unique(top10cluster4extracted$Description)
descriptions4
price4
descriptions4
mostFreqProductsExtracted$numStockCode <- clusterColumns$numStockCode
mostFreqProductsExtracted$numCountry <- clusterColumns$numCountry
mostFreqProductsExtracted$cluster <- clusterColumns3$cluster
mostFreqProductsExtracted
clsuterProductCountry <- mostFreqProductsExtracted[order(mostFreqProductsExtracted$cluster),]
clsuterProductCountry
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters <- read.csv("clusterProductCustomer.csv", header = TRUE)
allProductCountryClusters
K <- 5
kMeansFit <- kmeans(clusterColumns3, centers = K, nstart = 20)
kMeansFit <- kmeans(clusterColumns3, centers = K, nstart = 20)
kMeansFit
kMeansFit
# Note that the labels are stored as follows
kMeansFit$cluster
clusterColumns3$cluster <- kMeansFit$cluster
mostFreqProductsExtracted$numStockCode <- clusterColumns$numStockCode
mostFreqProductsExtracted$numCountry <- clusterColumns$numCountry
mostFreqProductsExtracted$cluster <- clusterColumns3$cluster
mostFreqProductsExtracted
clsuterProductCountry <- mostFreqProductsExtracted[order(mostFreqProductsExtracted$cluster),]
clsuterProductCountry
descriptions1
descriptions5 <- unique(top10cluster5extracted$Description)
descriptions5
country5 <- unique(top10cluster5extracted$Country)
price5 <- unique(top10cluster2extracted$UnitPrice)
price5
descriptions5
country1 <- unique(top10cluster1extracted$Country)
country1
country4 <- unique(top10cluster4extracted$Country)
country4
country5 <- unique(top10cluster5extracted$Country)
country5
descriptions5
price5
country5
descriptions5
head(mostFreqProductsExtracted)
# Install and load essentials
# install.packages("tseries")
# install.packages("forecast")
library(tseries)
library(forecast)
# Check the timeline of the Full Dataset
time(airData)
# Load and explore the time series
airData <- AirPassengers
# Divide the dataset into Train and Test
airTrain <- window(airData, start = 1949, end = 1958.99)  # end is optional, but for training end is needed
# Check the timeline of the Full Dataset
time(airData)
# Divide the dataset into Train and Test
airTrain <- window(airData, start = 1949, end = 1958.99)  # end is optional, but for training end is needed
airTest <- window(airData, start = 1959)
# Check the Train and Test datasets
airTrain
airTest
autoplot(airTrain, series = "Train Data",
main = "", xlab = "Time", ylab = "Passengers") +
autolayer(airTest, series="Test Data")
# Fit the Simple Models for Forecasting
airDataMean <- meanf(airTrain, h = 24)
airDataNaive <- naive(airTrain, h = 24)
airDataDrift <- rwf(airTrain, h = 24, drift = TRUE)
airDataSNaive <- snaive(airTrain, h = 24)
# Check the Forecast Accuracy
accuracy(airDataMean, airTest)
accuracy(airDataNaive, airTest)
accuracy(airDataDrift, airTest)
accuracy(airDataSNaive, airTest)
# View as Time Series
autoplot(airData, xlab = "Time", ylab = "Passengers")
# -------------------------------------------------------
# Moving Average Smoothing of the Time Series
maOrder = 12           # try different values (this is m value, the window size)
airDataMA <- ma(airData, order = maOrder, centre = FALSE)
autoplot(airData, series = "Original",
xlab = "Time", ylab = "Passengers") +
autolayer(airDataMA, series = "Smoothed")
# -------------------------------------------------------
# Moving Average Smoothing of the Time Series
maOrder = 2           # try different values (this is m value, the window size)
airDataMA <- ma(airData, order = maOrder, centre = FALSE)
autoplot(airData, series = "Original",
xlab = "Time", ylab = "Passengers") +
autolayer(airDataMA, series = "Smoothed")
# -------------------------------------------------------
# Moving Average Smoothing of the Time Series
maOrder = 6           # try different values (this is m value, the window size)
airDataMA <- ma(airData, order = maOrder, centre = FALSE)
autoplot(airData, series = "Original",
xlab = "Time", ylab = "Passengers") +
autolayer(airDataMA, series = "Smoothed")
# -------------------------------------------------------
# Moving Average Smoothing of the Time Series
maOrder = 12           # try different values (this is m value, the window size)
airDataMA <- ma(airData, order = maOrder, centre = FALSE)
autoplot(airData, series = "Original",
xlab = "Time", ylab = "Passengers") +
autolayer(airDataMA, series = "Smoothed")
# -------------------------------------------------------
# Decomposition of a Time Series (Additive)
airDecompA <- decompose(airData, type = "additive")
autoplot(airDecompA)
# Decomposition of a Time Series (Multiplicative)
airDecompM <- decompose(airData, type = "multiplicative")
autoplot(airDecompM)
# Log-transform to stabilize Variance
airDataLog <- log(airData)
autoplot(airDataLog,
main = "", xlab = "Time", ylab = "Log(Passengers)")
adf.test(airDataLog)
# Differencing to stabilize Mean
airDataLogDiff <- diff(airDataLog)
autoplot(airDataLogDiff,
main = "", xlab = "Time", ylab = "d(Log(Passengers))")
adf.test(airDataLogDiff)
library(shiny); runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
runApp('D:/NTU/FINAL SEMMMMMM/cz4073/assignment 4/data-sci-assignment-4/tutorial 6 shiny app sample.R')
